            - ชื่อ : การโต้ตอบครั้งแรก
  การใช้งาน: actions/first-interaction@v1.3.0
  กับ:
    # โทเค็นสำหรับที่เก็บข้อมูล สามารถส่งผ่านได้โดยใช้ {{ secrets.GITHUB_TOKEN }}
    repo-โทเค็น:
    # แสดงความคิดเห็นเพื่อโพสต์เกี่ยวกับประเด็นแรกของแต่ละบุคคล
    ข้อความปัญหา: # ตัวเลือก
    # แสดงความคิดเห็นในการโพสต์คำขอการดึงครั้งแรกของแต่ละบุคคล
    ข้อความ pr: # ตัวเลือก

                      - ชื่อ: การตั้งค่าสภาพแวดล้อม Go
  การใช้งาน: actions/setup-go@v5.5.0
  กับ:
    # เวอร์ชัน Go สำหรับดาวน์โหลด (หากจำเป็น) และใช้งาน รองรับสเปกและช่วงของเซมเวอร์ โปรดใส่ตัวเลือกนี้ไว้ในเครื่องหมายคำพูดเดี่ยว
    go-version: # ตัวเลือก
    # เส้นทางไปยังไฟล์ go.mod หรือ go.work
    go-version-file: # ตัวเลือก
    # ตั้งค่าตัวเลือกนี้เป็นจริง หากคุณต้องการให้การดำเนินการตรวจสอบเวอร์ชันล่าสุดที่มีอยู่ซึ่งตรงตามข้อกำหนดเวอร์ชันเสมอ
    ตรวจสอบล่าสุด: # ตัวเลือก
    # ใช้ในการดึงข้อมูลการแจกจ่าย Go จากเวอร์ชัน go เนื่องจากมีค่าเริ่มต้น จึงมักไม่ได้ระบุโดยผู้ใช้ เมื่อเรียกใช้การดำเนินการนี้บน github.com ค่าเริ่มต้นก็เพียงพอแล้ว เมื่อเรียกใช้บน GHES คุณสามารถส่งโทเค็นการเข้าถึงส่วนบุคคลสำหรับ github.com ได้หากคุณประสบปัญหาการจำกัดอัตรา
    โทเค็น: # ตัวเลือก ค่าเริ่มต้นคือ ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # ใช้เพื่อระบุว่าจำเป็นต้องมีการแคชหรือไม่ ตั้งค่าเป็น true หากคุณต้องการเปิดใช้งานการแคช
    แคช: # ตัวเลือก ค่าเริ่มต้นคือ true
    # ใช้เพื่อระบุเส้นทางไปยังไฟล์การอ้างอิง - go.sum
    เส้นทางการพึ่งพาแคช: # ตัวเลือก
    # สถาปัตยกรรมเป้าหมายสำหรับ Go ที่จะใช้ ตัวอย่าง: x86, x64 จะใช้สถาปัตยกรรมระบบตามค่าเริ่มต้น
    สถาปัตยกรรม: # ตัวเลือก
          
            
            - ชื่อ : แคช
  ใช้: actions/cache@v4.2.3
  กับ:
    # รายการไฟล์ ไดเรกทอรี และรูปแบบไวลด์การ์ดที่ต้องแคชและเรียกคืน
    เส้นทาง:
    # คีย์ที่ชัดเจนสำหรับการคืนค่าและบันทึกแคช
    สำคัญ:
    # สตริงหลายบรรทัดที่เรียงลำดับซึ่งแสดงรายการคีย์ที่ตรงกับคำนำหน้า ซึ่งใช้ในการคืนค่าแคชเก่าหากไม่มีการเข้าถึงแคชสำหรับคีย์ โปรดทราบว่า `cache-hit` คืนค่า false ในกรณีนี้
    restore-keys: # ตัวเลือก
    # ขนาดชิ้นส่วนที่ใช้ในการแบ่งไฟล์ขนาดใหญ่ในระหว่างการอัปโหลดเป็นหน่วยไบต์
    ขนาดชิ้นส่วนการอัปโหลด: # ตัวเลือก
    # บูลีนเสริมเมื่อเปิดใช้งาน ช่วยให้ผู้รัน Windows สามารถบันทึกหรือเรียกคืนแคชที่สามารถเรียกคืนหรือบันทึกบนแพลตฟอร์มอื่นได้ตามลำดับ
    enableCrossOsArchive: # ตัวเลือก ค่าเริ่มต้นคือเท็จ
    # ล้มเหลวในเวิร์กโฟลว์หากไม่พบรายการแคช
    fail-on-cache-miss: # ตัวเลือก ค่าเริ่มต้นคือ false
    # ตรวจสอบว่ามีรายการแคชสำหรับอินพุตที่กำหนดหรือไม่ (คีย์, คีย์คืนค่า) โดยไม่ต้องดาวน์โหลดแคช
    ค้นหาเท่านั้น: # ตัวเลือก ค่าเริ่มต้นคือเท็จ
    # รันขั้นตอนการโพสต์เพื่อบันทึกแคชแม้ว่าขั้นตอนอื่นก่อนหน้านี้จะล้มเหลว
    save-always: # ตัวเลือก, ค่าเริ่มต้นคือ false


            - ชื่อ: ตั้งค่าสภาพแวดล้อม Node.js
  ใช้: actions/setup-node@v3.9.1
  กับ:
    # ตั้งค่า always-auth ใน npmrc
    always-auth: # ตัวเลือก ค่าเริ่มต้นคือ false
    # เวอร์ชัน ข้อมูลจำเพาะของเวอร์ชันที่จะใช้ ตัวอย่าง: 12.x, 10.15.1, >=10.15.0
    เวอร์ชันโหนด: # ตัวเลือก
    # ไฟล์ที่ประกอบด้วยข้อมูลจำเพาะของเวอร์ชันที่จะใช้ ตัวอย่าง: .nvmrc, .node-version, .tool-versions
    ไฟล์ node-version: # ตัวเลือก
    # สถาปัตยกรรมเป้าหมายสำหรับ Node ที่จะใช้ ตัวอย่าง: x86, x64 จะใช้สถาปัตยกรรมระบบตามค่าเริ่มต้น
    สถาปัตยกรรม: # ตัวเลือก
    # ตั้งค่าตัวเลือกนี้หากคุณต้องการให้การดำเนินการตรวจสอบเวอร์ชันล่าสุดที่มีอยู่ซึ่งตรงตามข้อกำหนดเวอร์ชัน
    ตรวจสอบล่าสุด: # ตัวเลือก
    # รีจิสทรีเสริมสำหรับการตั้งค่าการรับรองความถูกต้อง จะตั้งค่ารีจิสทรีในไฟล์ .npmrc และ .yarnrc ในระดับโครงการ และตั้งค่าการรับรองความถูกต้องเพื่ออ่านข้อมูลจาก env.NODE_AUTH_TOKEN
    registry-url: # ตัวเลือก
    # ขอบเขตเสริมสำหรับการรับรองความถูกต้องกับรีจิสทรีที่มีขอบเขต จะกลับไปเป็นของเจ้าของที่เก็บข้อมูลเมื่อใช้รีจิสทรี GitHub Packages (https://npm.pkg.github.com/)
    ขอบเขต: # ตัวเลือก
    # ใช้ในการดึงข้อมูลการแจกจ่ายโหนดจากเวอร์ชันโหนด เนื่องจากมีค่าเริ่มต้น จึงมักไม่ได้ระบุโดยผู้ใช้ เมื่อเรียกใช้การดำเนินการนี้บน github.com ค่าเริ่มต้นก็เพียงพอแล้ว เมื่อเรียกใช้บน GHES คุณสามารถส่งโทเค็นการเข้าถึงส่วนบุคคลสำหรับ github.com ได้หากคุณประสบปัญหาการจำกัดอัตรา
    โทเค็น: # ตัวเลือก ค่าเริ่มต้นคือ ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # ใช้เพื่อระบุตัวจัดการแพ็คเกจสำหรับการแคชในไดเร็กทอรีเริ่มต้น ค่าที่รองรับ: npm, yarn, pnpm
    แคช: # ตัวเลือก
    # ใช้เพื่อระบุเส้นทางไปยังไฟล์การอ้างอิง: package-lock.json, yarn.lock เป็นต้น รองรับไวด์การ์ดหรือรายชื่อไฟล์เพื่อแคชการอ้างอิงหลายรายการ
    เส้นทางการพึ่งพาแคช: # ตัวเลือก


                      - ชื่อ: ดาวน์โหลดสิ่งประดิษฐ์สร้าง
  การใช้งาน: actions/download-artifact@v4.3.0
  กับ:
    # ชื่อของสิ่งประดิษฐ์ที่จะดาวน์โหลด หากไม่ได้ระบุ สิ่งประดิษฐ์ทั้งหมดสำหรับการเรียกใช้จะถูกดาวน์โหลด
    ชื่อ: # ตัวเลือก
    # ID ของสิ่งประดิษฐ์ที่จะดาวน์โหลด คั่นด้วยจุลภาค สามารถใช้ทั้ง `artifact-ids` หรือ `name` ได้ แต่ไม่สามารถใช้ทั้งสองอย่างได้
    artifact-ids: # ตัวเลือก
    # เส้นทางปลายทาง รองรับการขยายเครื่องหมายทิลเดอพื้นฐาน ค่าเริ่มต้นคือ $GITHUB_WORKSPACE
    เส้นทาง: # ตัวเลือก
    # รูปแบบ glob ที่ตรงกับสิ่งประดิษฐ์ที่ควรดาวน์โหลด จะถูกละเว้นหากระบุชื่อ
    รูปแบบ: # ตัวเลือก
    # เมื่อจับคู่สิ่งประดิษฐ์หลายรายการแล้ว พฤติกรรมของไดเร็กทอรีปลายทางจะเปลี่ยนไป หากเป็นจริง สิ่งประดิษฐ์ที่ดาวน์โหลดจะอยู่ในไดเร็กทอรีเดียวกันที่ระบุโดยเส้นทาง หากเป็นเท็จ สิ่งประดิษฐ์ที่ดาวน์โหลดจะถูกแยกออกเป็นไดเร็กทอรีที่มีชื่อเฉพาะภายในเส้นทางที่ระบุ
    รวมหลายรายการ: # ตัวเลือก ค่าเริ่มต้นคือเท็จ
    # โทเค็น GitHub ที่ใช้ในการตรวจสอบสิทธิ์ด้วย GitHub API โทเค็นนี้จำเป็นเมื่อดาวน์โหลดอาร์ทิแฟกต์จากที่เก็บข้อมูลอื่นหรือจากการทำงานเวิร์กโฟลว์อื่น หากไม่ได้ระบุสิ่งนี้ การดำเนินการจะพยายามดาวน์โหลดอาร์ทิแฟกต์จากที่เก็บข้อมูลปัจจุบันและการทำงานเวิร์กโฟลว์ปัจจุบัน
    github-token: # ตัวเลือก
    # เจ้าของที่เก็บข้อมูลและชื่อที่เก็บข้อมูลเชื่อมกันด้วย "/" หากระบุ github-token นี่คือที่เก็บข้อมูลที่จะดาวน์โหลดสิ่งประดิษฐ์
    ที่เก็บข้อมูล: # ตัวเลือก ค่าเริ่มต้นคือ ${{ github.repository }}
    # ID ของเวิร์กโฟลว์ที่ทำการอัปโหลดอาร์ติแฟกต์ที่ต้องการ หากระบุ github-token นี่คือการรันที่อาร์ติแฟกต์จะถูกดาวน์โหลดจาก
    run-id: # ตัวเลือก ค่าเริ่มต้นคือ ${{ github.run_id }}
          
